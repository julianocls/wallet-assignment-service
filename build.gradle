buildscript {
	ext {
		oracleDBVersion = '23.4.0.24.05'
		flywayVersion = '10.11.0'
		springDocOpenApi = '2.8.8'
		springCloudVersion = '2023.0.4'
		javaFake = '1.0.2'
		avro = '1.8.0'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
		classpath "com.oracle.database.jdbc:ojdbc11:${oracleDBVersion}"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.graalvm.buildtools.native' version '0.10.2'
	id 'org.flywaydb.flyway' version "${flywayVersion}"
	id 'jacoco'
	id "com.github.davidmc24.gradle.plugin.avro" version "${avro}"
}

group = 'com.julianoclsantos'

jacoco {
	toolVersion = "0.8.11"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Database
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	implementation "com.oracle.database.jdbc:ojdbc11:${oracleDBVersion}"

	//Docs
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApi}"

	// Trace
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	// Data
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.confluent:kafka-avro-serializer:7.6.0'
	implementation 'org.apache.avro:avro:1.11.4'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Tests
	implementation('com.github.javafaker:javafaker:1.0.2') {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}

	// test container
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:testcontainers'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.awaitility:awaitility'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

apply from: 'gradle/database/flyway.gradle'
apply from: 'gradle/jacoco.gradle'

test {
	useJUnitPlatform()

	finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += [
			"-Amapstruct.suppressGeneratorTimestamp=true",
			"-Amapstruct.verbose=true"
	]
}
